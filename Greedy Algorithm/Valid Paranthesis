Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
====================

TC: O(N)
SC: O(1)

Two passes
left to right, we will count * as (. 
right to left, we will count * as )

class Solution {
public:
    bool checkValidString(string s) {
        int n = s.size();
        int leftP = 0;
        int rightP = 0;
        stack<char> st;
        for(int i = 0; i < n; i++){
            if(s[i] == '(' || s[i] == '*'){
                leftP++;
            }
            else{
                leftP--;
            }
            if(leftP < 0) return false;
        }
        for(int i = n-1; i >= 0; i--){
            if(s[i] == ')' || s[i] == '*'){
                rightP++;
            }
            else{
                rightP--;
            }
            if(rightP < 0) return false;
        }

         return true;   
    }
};
