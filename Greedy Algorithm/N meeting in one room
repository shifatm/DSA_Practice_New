You are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and 
end[i] is the finish time of meeting i. Return the maximum number of meetings that can be accommodated in a single meeting room, when only one meeting can be held in the meeting room at a particular time. 

Note: The start time of one chosen meeting can't be equal to the end time of the other chosen meeting.
====================
Define a struct that stores the meeting ID, the start time and the end time. Sort the struct in increasing order of end tine. So that we
can do as many meetings as possible.
TC: O(N)
SC: O(N) to store the struct

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    struct meet{
        int meetingID;
        int startTime;
        int endTime;
    };
    static bool compare(struct meet a, struct meet b){
        if(a.endTime == b.endTime){
            return a.meetingID < b.meetingID;
        }
        return a.endTime < b.endTime;
    }
    int maxMeetings(vector<int> start, vector<int> end) {
        int n = start.size();
        struct meet meeting[n];
        for(int i = 0; i < n ; i++){
            meeting[i].meetingID = i+1;
            meeting[i].startTime = start[i];
            meeting[i].endTime = end[i];
        }
        sort(meeting, meeting+n, compare);
        
        vector<int> meetingSchedule;
        meetingSchedule.push_back(meeting[0].meetingID);
        int prev_endTime = meeting[0].endTime;
        
        for(int i = 1; i<n; i++){
            if(meeting[i].startTime > prev_endTime){
                meetingSchedule.push_back(meeting[i].meetingID);
                prev_endTime = meeting[i].endTime;
            }
        }
        return meetingSchedule.size();
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        string input;
        int num;
        vector<int> start;

        getline(cin, input);
        stringstream s2(input);
        while (s2 >> num) {
            start.push_back(num);
        }

        vector<int> end;
        getline(cin, input);
        stringstream s22(input);
        while (s22 >> num) {
            end.push_back(num);
        }

        Solution ob;
        int ans = ob.maxMeetings(start, end);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends
