Given the head of a linked list and an integer val, remove all the nodes of the linked list 
that has Node.val == val, and return the new head.
===========================
ITERATIVE SOLUTION
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head == NULL) return NULL;
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        ListNode* curr = dummy;
        while(curr && curr->next){
            if(curr->next->val == val){
                ListNode* temp = curr->next;
                curr->next = temp->next;
                delete(temp);
            }
            else{
                curr = curr->next;
            }
        }
        return dummy->next;
    }
};

=========================

RECURSIVE SOLUTION

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head == NULL) return NULL;
        head->next = removeElements(head->next, val);
        if(head->val == val){
            ListNode* tmp = head->next;
            delete(head);
            return tmp;
        }
        return head;
        
    }
};
