You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

====================
Brute Force

Initialize, i = 0, and j = i+1. Add each combination and check. Increment i.

====================
C++ Solution

Sorting is the key. TC: O(N), SC: O(1)-> inplace sorting.

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        int n = nums.size();
        int i = 0, j = n-1;
        int count = 0;
        sort(nums.begin(), nums.end());
        while(i<j){
            if(nums[i] + nums[j] == k){
                i++;
                j--;
                count += 1;
            }
            else if((nums[i] >= k) || (nums[i] + nums[j] < k)){
                i++;
            }
            else if((nums[j] >= k) || (nums[i] + nums[j] > k)){
                j--;
            }
            
        }
        return count;
    }
};
