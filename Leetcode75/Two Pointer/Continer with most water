You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line 
are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

==============================
C++ Solution
Two Pointer Approach. Initialize i at 0 and j at n-1. the capacity of water will be calculated by taking the minimum of nums[i] 
and nums [j] -> height, and multiplying it with j-i -> width. Based on height we will move either i or j and upadte the max_water.

TC: O(N), SC: O(1)

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        int max_water = 0;
        int i = 0, j = n-1;
        while(i<j){
            int water = min(height[i], height[j]) * (j-i);
            if(water > max_water){
                max_water = water;
            }
            if(height[i]>=height[j]) j--;
            else i++;
        }
        return max_water;
    }
};
