Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that 
i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

==================
Brute Force

Nested for loop
Run i=0 to n, j = i+1 to n and k = j+1 to n. 
Return true when nums[i] < nums[j] < nums[k].
TC: O(N^3) and SC: O(1)
=====================

Better Solution - C++

Create a leftMin and rightMax array.
leftMin: array that contains minimum element to the left of i.
rigthMax: array that contains maximum element to the right of j.
iterate nums[]. if you find a triplet such that leftMin[i]<nums[i] and nums[i]<rightMax[i] return true.
TC: O(N) and SC: O(2N)

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();

        int leftMin[n];
        int rightMax[n];
        leftMin[0] = nums[0];

        for(int i=1; i<n; i++){
            leftMin[i] = min(leftMin[i-1],nums[i]);
        }

        rightMax[n-1] = nums[n-1];
        for(int i = n-2; i>=0; i--){
            rightMax[i] = max(rightMax[i+1], nums[i]);
        }

        for(int i = 0; i<n; i++){
            if(leftMin[i]<nums[i] && nums[i]<rightMax[i]) return true;
        }
        return false;
    }
};

============================
Optimal Solution - C++

Example nums[] = {2,3,1,4} 
Initially, first = 2, second = 3. p = 2 and q = 3 
Then, first = 1, second = 3. (This doesn't follow the constrain i<j<k),
However, we will update the p and q only when we change second. Hence at this point since we have't updated second (we have updated only first);
we will not change p and q.


class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        int first = INT_MAX;
        int second = INT_MAX;

        //to store the numbers we will use p,q,r;
        //we don't need to return p,q,r in this question
        int p,q,r;

        for(int i =0; i<n; i++){
            if(nums[i] <= first){
                first = nums[i];
            }
            else if(nums[i] <= second){
                second = nums[i];
                p = first;
                q = second;
            }
            else{
                return true;
            }
            
        }
        return false;
    }
};
