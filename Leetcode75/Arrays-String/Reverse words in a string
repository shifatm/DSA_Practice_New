Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. 
The returned string should only have a single space separating the words. Do not include any extra spaces.
=============================

C++ Solution

Two pointer approach. i will start from the beginning until it finds the first character. j will start from i+1 and will increment until it
finds a space(or end of the string). We will take out the substring from starting from i till the length j has covered (j-i). We will add it 
to the result. We will do this iteratively, and add the substring to the start of the result with a space.

class Solution {
public:
    string reverseWords(string s) {
        int n = s.size();
        string result;
        int i = 0;
        while(i<n){
            while(s[i] == ' '){
                i++;
            }
            if(i>=n) break;
            int j = i+1;
            while(j<n && s[j] != ' '){
                j++;
            }
            string sub = s.substr(i,j-i);
            if(result.length()==0){
                result = sub;
            }
            else{
                result = sub + " " + result;
            }
            i = j+1;
        }
        return result;
    }
};
