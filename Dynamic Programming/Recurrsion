The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, 
starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).
0 <= n <= 30
======================

C++ Solution Recurrsion and Memoization
It is a Top-Down approach. In here, we first stay at fib(n) and discover it needs fib(n-1) and fib(n-2), And then we go on computing it. 
TC: O(N), SC: O(N)

class Solution {
public:
    int fibonacci(int n, vector<int> &dp){
        if(n<=1) return n;
        if(dp[n] != -1) return dp[n];
        else return dp[n] = fibonacci(n-1, dp) + fibonacci(n-2, dp);
    }
    int fib(int n) {
        vector<int> dp(31, -1);
        return fibonacci(n, dp);
    }
};

=========================
C++ Tabulation
It is a sort of Bottom-Up approach. Where we are tabulating the answers from the lowest n and then making our way high up.
TC: O(N), SC: O(N)

class Solution {
public:
    int fibonacci(int n, vector<int> &dp){
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
    int fib(int n) {
        vector<int> dp(31, -1);
        return fibonacci(n, dp);
    }
};
=============================

C++ Space Optimization
We need the value of prev and prev-to-prev element only. We don't need to store the whole array.
TC: O(N), SC: O(1)

lass Solution {
public:
    int fibonacci(int n, vector<int> &dp){
        if(n<=1) return n;
        int prev2 = 0;
        int prev1 = 1;
        for(int i = 2; i<=n; i++){
            int curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
    int fib(int n) {
        vector<int> dp(31, -1);
        return fibonacci(n, dp);
    }
};

