TC: O(NlogN)
SC: O(N)

It takes extra array as temporary array to store intermediate results.
In the end, we need to take the temporary array and make the final result.



class Solution {
public:
    void merge(vector<int> &nums, int low, int mid, int high){
        //low .. mid |  mid+1 .. high
        int left = low;
        int right = mid + 1;
        vector<int> temp;
        while(left <= mid && right <= high){
            if(nums[left] <=  nums[right]){
                temp.push_back(nums[left]);
                left++;
            }
            else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        while(left <= mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right <= high){
            temp.push_back(nums[right]);
            right++;
        }

        for(int i = low; i<= high; i++){
            nums[i] = temp[i-low];
        }

    }
    void mergeSort(vector<int>& nums, int low, int high){
        if(low == high) return;
        int mid = (low + high) / 2;
        mergeSort(nums, low, mid);
        mergeSort(nums, mid+1, high);
        merge(nums, low, mid, high);
    }
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size()-1);
        return nums;
    }
};
