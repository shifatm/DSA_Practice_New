Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
==================
once we go one level below of root, the left of left node should be compared with right of right node.

      1
     2  2
   3      3

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return isMirror(root->left, root->right);
    }
private:
    bool isMirror(TreeNode* n1, TreeNode* n2){
        if(n1 == NULL && n2 == NULL) return true;
        else if(n1 == NULL || n2 == NULL) return false;
        else if(n1->val == n2->val){
            return isMirror(n1->right, n2->left) && isMirror(n1->left, n2->right);
        }
        return false;
    }
};
