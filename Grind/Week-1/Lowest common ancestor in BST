Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q 
as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

=======================
In BST, the values appearing to the left of a node will always be lower than the value at the node. The values appearing to the
right of the node will always be greater than the node.

Constraints:
  1. The number of nodes in the tree is in the range [2, 105].
  2. -109 <= Node.val <= 109
  3. All Node.val are unique.
  4. p != q
  5. p and q will exist in the BST.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL || p->val == root->val || q->val == root->val) return root;
        if(p->val < root->val && q->val < root->val) return lowestCommonAncestor(root->left, p, q);

        if(p->val > root->val && q->val > root->val) return lowestCommonAncestor(root->right, p, q);

        return root;

    }
};
