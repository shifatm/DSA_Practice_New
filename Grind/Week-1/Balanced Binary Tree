Given a binary tree, determine if it is height-balanced. A height balanced binary tree is the one where the the difference 
of the height of subtrees of any node is not more than 1.
=====================
Modified the method of computing height of a binary tree. If the absolute difference between left tree's and right tree's height is 
greater than 1, the height function returns -1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(dfsHeight(root) == -1) return false;
        return true;
    }
    int dfsHeight(TreeNode* root){
        if(root == NULL) return 0;
        int leftHeight = dfsHeight(root->left);
        int rightHeight = dfsHeight(root->right);

        if(abs(leftHeight - rightHeight) > 1) return -1;
        if(leftHeight == -1 || rightHeight == -1) return -1;
        return max(leftHeight, rightHeight)+1;
    }
};
