Given two strings s and t, return true if t is an 
anagram of s, and false otherwise.

===================
class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        if(s==t) return true;
        return false;
    }
};
=====================
What if the inputs contain Unicode characters? How would you adapt your solution to such a case?
=====================

Create a map of (char, int) type. Iterate through first string and put that in the map with key as the character and value as the
number of times it appears in the string. While iterating trhough the second string, reduce the count in the map if character is 
in the map and it matches. If the character is not even there that signifies the strings are not anagrams. In the end iterate through
the map. If all the value in the map has reduced to zero, that means the strings are anagrams.

class Solution {
public:
    bool isAnagram(string s, string t) {
        map<char, int> frequencyMap;
        for(int i = 0; i<s.length(); i++){
            if(frequencyMap.find(s[i]) != frequencyMap.end()){
                frequencyMap.find(s[i])->second++;
            }
            else{
                frequencyMap.insert(pair<char, int>(s[i], 1));
            }
        }

        for(int i = 0; i<t.length(); i++){
            if(frequencyMap.find(t[i]) != frequencyMap.end()){
                frequencyMap.find(t[i])->second--;
            }
            else{
                return false;
            }
        }

        map<char, int>:: iterator it = frequencyMap.begin();
        while(it != frequencyMap.end()){
            if(it->second != 0) return false;
            it++;
        }
        return true;
    }
};

