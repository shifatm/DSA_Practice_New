Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

===========================
C++ Solution

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        int n = s.size();
        if(n==0 || n==1) return false;
        for(int i = 0; i< s.size(); i++){
            if(s[i] == '('){
                st.push(')');
            }
            else if(s[i] == '['){
                 st.push(']');
            }
            else if(s[i] == '{'){
                st.push('}');
            }
            else{
                if(st.empty()) return false; // what if s consists of two blank spaces, then it's an invalid string.
                else if(s[i] != st.top()) return false;
                st.pop();
            }
        }
        if(!st.empty()) return false;
        return true;
        
    }
};
=====================================
JAVA Solution

class Solution {
    public boolean isValid(String s) {
        int n = s.length();
        if(n==1 || n==0) return false;
        Stack<Character> st = new Stack<>();
        for(int i=0; i<n; i++){
            if(s.charAt(i) == '(') st.push(')');
            else if(s.charAt(i) == '[') st.push(']');
            else if(s.charAt(i) == '{') st.push('}');
            else{
                if(st.empty()) return false;
                else if(s.charAt(i) != st.peek()) return false;
                else st.pop();
            }
        }
        if(st.empty()) return true;
        return false;
    }
}
