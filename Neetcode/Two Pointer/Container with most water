You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

=========================
C++ Solution

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        int max_area;
        int i=0;
        int j = n-1;
        if(height[i]<height[j]){
            max_area = height[i] * (j-i);
            i++;
        }
        else{
            max_area = height[j] * (j-i);
            j--;
        }
        while(i<j){
            int area;
            if(height[i] < height[j]){
                area = height[i] * (j-i);
                i++;
            }
            else if(height[j] <= height[j]){
                area = height[j] * (j-i);
                j--;
            }
            if(area > max_area){
                max_area = area;
            }
            
        }
        return max_area;  
    }
};

===============================
JAVA Solution

class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int max_area;
        int i=0;
        int j = n-1;
        if(height[i]<height[j]){
            max_area = height[i] * (j-i);
            i++;
        }
        else{
            max_area = height[j] * (j-i);
            j--;
        }
        while(i<j){
            int area = 0;
            if(height[i] < height[j]){
                area = height[i] * (j-i);
                i++;
            }
            else if(height[j] <= height[j]){
                area = height[j] * (j-i);
                j--;
            }
            if(area > max_area){
                max_area = area;
            }
            
        }
        return max_area;  
    }
}
