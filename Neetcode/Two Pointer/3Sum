Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
=========================

C++ Solution

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        map<vector<int>,bool> mp;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i=0; i<=n-3; i++){
            int j = i+1;
            int k = n-1;
            while(j < k){
                int total = nums[i] + nums[j] + nums[k];
                if(total < 0){
                    j++;
                    continue;
                }
                if(total > 0){
                    k--;
                    continue;
                }
                else{
                    vector<int> v = {nums[i], nums[j], nums[k]};
                    mp.insert({v, true});
                    j++;
                    k--;
                }
            }
        }
        map<vector<int>, bool>::iterator itr;
        for(itr = mp.begin(); itr!= mp.end(); itr++){
            result.push_back(itr->first);
        }
        return result;
    }
};

=========================
JAVA Solution
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        Map<List<Integer>, Boolean> mapp = new HashMap<>();
        for(int i = 0; i<=n-3; i++){
            int j = i+1;
            int k = n-1;
            while(j<k){
                int total = nums[i] + nums[j] + nums[k];
                if(total < 0){
                    j++;
                    continue;
                }
                if(total > 0){
                    k--;
                    continue;
                }
                else{
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]); list.add(nums[j]); list.add(nums[k]);
                    mapp.put(list, true);
                    j++;
                    k--;
                }
            }
        }
        for(Map.Entry<List<Integer>, Boolean> e: mapp.entrySet()){
            result.add(e.getKey());
        }
        return result;
    }
}
