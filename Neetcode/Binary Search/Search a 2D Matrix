You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

==============================
C++ Solution - Better Approach

(# DID NOT PASS SOME TEST CASE, NO IDEA WHY!!)
class Solution {
public:
    bool binarySearch(vector<int>& nums, int target){
        int n = nums.size();
        int start = 0;
        int end = n-1;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target) return true;
            else if(nums[mid] > target) start = mid + 1;
            else end = mid - 1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();

        for(int i = 0; i<n; i++){
            if(target >= matrix[i][0] && target <= matrix[i][m-1]){
                return binarySearch(matrix[i], target);
            }
        }
        return false;
    }
};


========================================
C++ SOLUTION - OPTIMAL SOLUTION

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();

        int start = 0;
        int end = m*n-1;

        while(start <= end){
            int mid = start + (end - start)/2;
            int row = mid/m;
            int col = mid%m;
            if(matrix[row][col] == target){
                return true;
            }
            else if(matrix[row][col] < target){
                start = mid + 1;
               
            }
            else{
                 end = mid - 1;
            }
        }
        return false;
    }
};
